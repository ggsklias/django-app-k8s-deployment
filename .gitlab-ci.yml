# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
stages:
  - build
  - provision_servers_and_install_k8s_cluster
  - provision_ansible_kubernetes_cluster
  - deploy
  - wait
  - terraform_destroy

variables:
  AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
  AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
  TF_VAR_some_variable: "value"  # Example: any Terraform variables you need

build:
  # Use the official docker image.
  image: docker:cli
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_REF_SLUG
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - docker build --no-cache --progress plain --pull -t "$DOCKER_IMAGE_NAME" ./djangoarticleapp/
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - djangoarticleapp/Dockerfile
  # artifacts:
  #   paths:
  #     - path/to/built/images  # if you need to persist artifacts

provision_servers_and_install_k8s_cluster:
  stage: provision_servers_and_install_k8s_cluster
  image:
    name: willhallonline/ansible:2.18.2-ubuntu-24.04
    entrypoint: [""]
  script:
    - echo "Provisioning EC2 instances using Terraform"
    - apt-get update && apt-get install -y wget unzip
    - apt-get update && apt-get install -y rsync
    - wget https://releases.hashicorp.com/terraform/1.10.5/terraform_1.10.5_linux_amd64.zip
    - unzip terraform_1.10.5_linux_amd64.zip -d /usr/local/bin/
    - terraform version  # Verify installation
    - chmod 755 provision
    - cd provision
    - terraform init
    - python3 provision.py 
    - echo "Running Ansible playbook to configure EC2 instances"
    - sleep 60
    - echo "$SSH_PRIVATE_KEY" > ssh_key.pem
    - chmod 600 ssh_key.pem
    - ls -la
    - cat inventory.ini
    - ansible-playbook -i inventory.ini provision_kubernetes_cluster.yml
  artifacts:
    paths:
      - provision/.terraform.lock.hcl  # Persist state if needed
      - provision/terraform.tfstate 
      - provision/inventory.ini

deploy:
  stage: deploy
  image: 
    name: willhallonline/ansible:2.18.2-ubuntu-24.04
    entrypoint: [""]
  script:
    - echo "Running Ansible playbook to configure EC2 instances"
    - ls -la
    - apt-get update && apt-get install -y rsync
    - chmod 755 provision
    - cd provision
    - echo "$SSH_PRIVATE_KEY" > ssh_key.pem
    - chmod 600 ssh_key.pem
    - ls -la
    - cat inventory.ini
    - ansible-playbook -i inventory.ini deploy_app.yml
  dependencies:
    - provision_servers_and_install_k8s_cluster

wait:
  stage: wait
  image: 
    name: alpine:latest
    entrypoint: [""]
  script:
    - echo "Waiting for 10 minutes before teardown..."
    - sleep 600

terraform_destroy:
  stage: terraform_destroy
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]
  script:
    - cd provision
    - ls -la
    - terraform init
    - terraform destroy -auto-approve
  dependencies:
    - provision_servers_and_install_k8s_cluster
  rules:
    - when: always

  # artifacts:
  #   paths:
  #     - terraform.tfstate  # Persist state if needed



# provision_ansible_kubernetes_cluster:
#   stage: provision_ansible_kubernetes_cluster
#   image: 
#     name: willhallonline/ansible:2.18.2-ubuntu-24.04
#     entrypoint: [""]
#   script:
#     - echo "Running Ansible playbook to configure EC2 instances"
#     - ls -la
#     - apt-get update && apt-get install -y rsync
#     - chmod 755 provision
#     - cd provision
#     - echo "$SSH_PRIVATE_KEY" > ssh_key.pem
#     - chmod 600 ssh_key.pem
#     - ls -la
#     - cat inventory.ini
#     - ansible-playbook -i inventory.ini provision_kubernetes_cluster.yml
#   dependencies:
#     - provision_terraform

        
