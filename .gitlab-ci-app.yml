stages:
  - build
  - deploy_and_get_app_url

.helm_installation: &helm_installation
  - curl -L https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz -o helm.tar.gz
  - tar -zxvf helm.tar.gz
  - mv linux-amd64/helm /usr/local/bin/helm
  - chmod +x /usr/local/bin/helm
  - helm version --short

.default_terraform: &default_terraform
  - cd provision/terraform
  - aws s3 cp s3://$AWS_BUCKET_NAME/terraform/terraform.tfstate .
  - aws s3 cp s3://$AWS_BUCKET_NAME/terraform/.terraform.lock.hcl .
  - terraform init

.default_ansible: &default_ansible
  - apt-get update && apt-get install -y unzip curl
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install
  - aws s3 cp s3://$AWS_BUCKET_NAME/ansible/inventory.ini provision/ansible/inventory.ini
  - chmod 755 provision/ansible
  - cd provision/ansible
  - echo "$SSH_PRIVATE_KEY" > ssh_key.pem
  - chmod 600 ssh_key.pem

variables:
  AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
  AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"

build:
  # Use the official docker image.
  image: docker:cli
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - echo $ALB_DNS
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_REF_SLUG
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - echo $CI_COMMIT_BRANCH
    - echo $CI_DEFAULT_BRANCH
    - echo $DOCKER_IMAGE_NAME
    - docker build --no-cache --progress plain --pull -t "$DOCKER_IMAGE_NAME" ./djangoarticleapp
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
        docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
      fi
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - djangoarticleapp/Dockerfile

deploy_and_get_app_url:
  stage: deploy_and_get_app_url
  before_script:
    - ansible-galaxy collection install kubernetes.core
    - ansible-galaxy collection install community.kubernetes
  image:
    name: willhallonline/ansible:2.18.2-ubuntu-24.04
    entrypoint: [""]
  script:
    - *helm_installation
    - *default_ansible
    - ansible-playbook -i inventory.ini deploy_app.yml -v
    - apt-get update && apt-get install -y wget unzip rsync curl
    - wget https://releases.hashicorp.com/terraform/1.10.5/terraform_1.10.5_linux_amd64.zip
    - unzip terraform_1.10.5_linux_amd64.zip -d /usr/local/bin/
    - cd ../../
    - *default_terraform
    - terraform output -raw alb_dns_name
